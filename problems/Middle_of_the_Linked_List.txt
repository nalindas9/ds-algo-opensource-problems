## Problem
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

##  Solution

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        """
        Input: head = [1,2,3,4,5]
        Output: 3
        
        Approach 1 - 
        Iterate through the linked list
        Store the elements in an array
        Find the 2nd middle number using index
        
        Time - O(n)
        Space - O(n)
        """
        # Initialize array to store elements
        nodes = list()
        # Iterate through linked list
        current_node = head
        while current_node != None:
            nodes.append(current_node)
            current_node = current_node.next
        # Return 2nd middle number in array
        if (len(nodes) % 2 == 0):
            return nodes[len(nodes)//2]
        else:
            return nodes[(len(nodes)-1)//2]
