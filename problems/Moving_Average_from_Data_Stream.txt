## Problem
Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the MovingAverage class:

MovingAverage(int size) Initializes the object with the size of the window size.
double next(int val) Returns the moving average of the last size values of the stream.
 

Example 1:

Input
["MovingAverage", "next", "next", "next", "next"]
[[3], [1], [10], [3], [5]]
Output
[null, 1.0, 5.5, 4.66667, 6.0]

Explanation
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3
 

Constraints:

1 <= size <= 1000
-105 <= val <= 105
At most 104 calls will be made to next.

## Solution

import java.util.Queue;
import java.util.LinkedList;

class MovingAverage {
    /*
    Input
    ["MovingAverage", "next", "next", "next", "next"]
    [[3], [1], [10], [3], [5]]
    Output
    [null, 1.0, 5.5, 4.66667, 6.0]
    
    Approach 1:
    1. We can use a queue for this.
    2. initialize sizew of queue based on size given.
    3. In the next method, we want to add the element
    in FIFO style. If queue is full, then pop front element and add
    the new element to the last.
    4. Then calculate the average.

    Time - O(n)
    Space - O(n)
    */
    int size;
    // Instantiates the queue
    Queue<Integer> queue = new LinkedList<>();
    
    public MovingAverage(int size) {      
        this.size = size;
    }
    
    public double next(int val) {
        if (this.queue.size() < this.size) {
            queue.add(val);
        } else {
            queue.poll();
            queue.add(val);
        }
        
        int sum = 0;
        
        for (int num:queue) {
            sum += num;
        }
        
        // Calculate average
        return (double) sum/queue.size();
    }
}

/**
 * Your MovingAverage object will be instantiated and called as such:
 * MovingAverage obj = new MovingAverage(size);
 * double param_1 = obj.next(val);
 */

