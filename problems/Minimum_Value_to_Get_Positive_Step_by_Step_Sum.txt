Problem:
Given an array of integers nums, you start with an initial positive value startValue.

In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).

Return the minimum positive value of startValue such that the step by step sum is never less than 1.

 

Example 1:

Input: nums = [-3,2,-3,4,2]
Output: 5
Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.
step by step sum
startValue = 4 | startValue = 5 | nums
  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
  (1 +2 ) = 3  | (2 +2 ) = 4    |   2
  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
  (0 +4 ) = 4  | (1 +4 ) = 5    |   4
  (4 +2 ) = 6  | (5 +2 ) = 7    |   2
Example 2:

Input: nums = [1,2]
Output: 1
Explanation: Minimum start value should be positive. 
Example 3:

Input: nums = [1,-2,-3]
Output: 5
 

Constraints:

1 <= nums.length <= 100
-100 <= nums[i] <= 100

----------------------------------------------------------------------------------
Solution:

class Solution {
    public int minStartValue(int[] nums) {
        /*
        Input: nums = [-3,2,-3,4,2]
        Output: 5
        Since we are given the conditions that
        minimum positive value of startValue such that the 
        step by step sum is never less than 1.
        We can assume that the startValue + nums[0] >= 1
        has to be
        But how do we decide this value. Perhaps precomputing
        the prefix sums might help
        [-3,2,-3,4,2]
        [-3, -1, -4, 0, 2]
        What we want is that at each step the prefix sum
        has to be greater than 1
        Hence the start value should be greater than the
        abs value of the max value in the prefix sums array by
        1
        Hence first calculate prefix sums array
        then find max element.
        then return minStartValue = abs(max)+1
        
        if we take the [0, 1, 2] example
        [1, 3]
        */
        // Prefix sum array
        for (int i=1; i<nums.length; i++) {
            nums[i] = nums[i-1] + nums[i]; 
        }
        // Find element with max absolute value in prefix sums array
        int max_element = 0;
        for (int i=0; i<nums.length; i++) {
            // Check if absolute value of current element 
            // greater than max_element in the condition that
            // the current element is negative
            if (nums[i] < 0 && Math.abs(nums[i]) > max_element)
                max_element = Math.abs(nums[i]);
        }
        return max_element+1;
    }
}
