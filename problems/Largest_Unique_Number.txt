## Problem
Given an integer array nums, return the largest integer that only occurs once. If no integer occurs once, return -1.

 

Example 1:

Input: nums = [5,7,3,9,4,9,8,3,1]
Output: 8
Explanation: The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it is the answer.
Example 2:

Input: nums = [9,9,8,8]
Output: -1
Explanation: There is no number that occurs only once.
 

Constraints:

1 <= nums.length <= 2000
0 <= nums[i] <= 1000

## Solution
/**
 * @param {number[]} nums
 * @return {number}
 */
var largestUniqueNumber = function(nums) {
    /*
    Input: nums = [5,7,3,9,4,9,8,3,1]
    Output: 8
    
    Approach 1:
    We can use a hashmap to store frequency
    of each element
    by iterating array once.
    
    Then we can iterate over
    keys array and find max element with freq = 1
    else if no int then return -1
    
    Time - O(2n) = O(n)
    Space - O(1)
    */
    const map = new Map()
    // Iterate through array to store
    // freqs in hashmap
    for (let i=0; i<nums.length; i++) {
        // If element not in hashmap
        // add it
        // else increment value
        if (map.has(nums[i]) == false)
            map.set(nums[i], 1)
        else
            map.set(nums[i], map.get(nums[i])+1)
    }
    let max_element = -1
    // Iterate through keys to find 
    // max element with value = 1
    for (const key of map.keys()) {
        if(map.get(key) == 1 && key >= max_element)
            max_element = key
    }
    return max_element
};
