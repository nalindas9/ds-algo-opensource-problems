## Problem
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 

Constraints:

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.
 

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

## Solution
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        /*
        Input: nums = [3,0,1]
        Output: 2
        
        Approach 1:
        1. [3,0,1]
        On way is to sort numbers first
        [0, 1, 3]
               ^
         Hence we can say 2 is missing
         since next number is 3 instead of 2
         
         Time - O(nlogn) - Fastest sort time
         Space - O(1)
         
        Approach 2:
        1. [3, 0, 1]
        0 1 2 3
        We can calculate sum of numbers
        from 0 till n = n(n+1)/2
        Sum of all natural numbers
        then keep subtracting elements untill we
        get missing number
        Time - O(n)
        Space - O(1)
        */
        // Calculate sum of natural nums
        int sum = (nums.size()*(nums.size() + 1))/2;
        // Iterate through array to 
        // find missing number
        for (int i=0; i<nums.size(); i++) {
            sum -= nums[i];
        }
        return sum;
    }
};
