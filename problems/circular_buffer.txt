class MyCircularQueue:
    """
    Input
    ["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]
    [[3], [1], [2], [3], [4], [], [], [], [4], []]
    
    Output
    [null, true, true, true, false, 3, true, true, true, 4]
    
    Approach 1:
    1. 
    
    """
    def __init__(self, k: int):
        self._k = k
        self._buffer = []
        
    def enQueue(self, value: int) -> bool:
        if not self.isFull():
            self._buffer.append(value)
            return True
        return False

    def deQueue(self) -> bool:
        if not self.isEmpty():
            self._buffer.pop(0)
            return True
        return False

    def Front(self) -> int:
        if not self.isEmpty():
            return self._buffer[0]
        return -1

    def Rear(self) -> int:
        if not self.isEmpty():
            return self._buffer[-1]
        return -1

    def isEmpty(self) -> bool:
        if len(self._buffer) == 0:
            return True
        return False

    def isFull(self) -> bool:
        if len(self._buffer) == self._k:
            return True
        return False


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()