Question:
Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

Solution:
    bool dfs(std::vector<std::vector<char>>& grid, int x, int y) {
        int m = grid.size();
        int n = (grid.at(0)).size();

        // Mark node visited
        grid[y][x] = '0';
        if (x > 0 && grid[y][x-1] == '1')
            dfs(grid, x-1, y);
        if (x < n-1 && grid[y][x+1] == '1')
            dfs(grid, x+1, y);
        if (y < m-1 && grid[y+1][x] == '1')
            dfs(grid, x, y+1);
        if (y > 0 && grid[y-1][x] == '1')
            dfs(grid, x, y-1);
        return true;
    }
    int numIslands(vector<vector<char>>& grid) {
        // Counter for number of islands
	int number_of_islands = 0;
    // Grid size 
    int m = grid.size();
    int n = (grid.at(0)).size();
    // Edge case
    if (m == 1 && n == 1) {
        if ((grid.at(0)).at(0) == '1')
            return 1;
        else return 0;
    }
    //std::cout << "m: " << m << "n: " << n << std::endl; 
	// Iterate through grid
	for (int i=0; i<m; i++) {
		for (int j=0; j<n; j++) {
			char element = (grid.at(i)).at(j);
            //std::cout << "Element: " << element << std::endl;
			if (element == '1') {
				// Call dfs
                //std::cout << "i: " << i << "j:" << j << std::endl;
				bool island_exists = dfs(grid, j, i);
				if (island_exists)
					number_of_islands++;
                //std::cout << number_of_islands << std::endl;
			}
		}
	}
	return number_of_islands;
    }

int main() {
	std::vector<std::vector<char>> grid = {
																					{'1','1','0','1','0'},
																					{'1','0','0','1','0'},
																					{'0','1','1','0','0'},
																					{'1','0','1','0','0'}
																				};
	int number_of_islands = numIslands(grid);
	std::cout << "Number of islands: " << number_of_islands << std::endl;
	return 0;	
}
