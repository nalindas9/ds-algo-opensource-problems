Problem:
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

Solution:
/*
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

Approach 1:
1. Iterate through the matrix.
2. For each element, run a bfs or dfs
3. Have a seperate count once backtracking
over num_islands = 0

Time Complexity - 
O(m*n)
Space Complexity - 
O(m*n)
*/
#include <stdio.h>
#include <string.h>
class Solution {
public:
    void dfs(vector<vector<char>>& grid, int x, int y) {
        int m = grid.size();
        int n = grid[0].size();

        // Mark current node visited
        grid[x][y] = '0';
        // Add direction checks
        // North
        if ((x-1 >= 0) && (grid[x-1][y] == '1'))
            dfs(grid, x-1, y);
        // East
        if ((y+1 < n) && (grid[x][y+1] == '1'))
            dfs(grid, x, y+1);
        // South
        if ((x+1 < m) && (grid[x+1][y] == '1'))
            dfs(grid, x+1, y);
        // West
        if ((y-1 >= 0) && (grid[x][y-1] == '1'))
            dfs(grid, x, y-1);
    }
    int numIslands(vector<vector<char>>& grid) {
        // Initialize number of islands
        int num_islands = 0;
        // Edge cases
        // If grid size < 1x1
        // then num islands == 0
        
        if (grid.size() < 1 && grid[0].size() < 1) {
            return num_islands;
        }
            
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[i].size(); j++) {
                // Check if node is not visited
                // If not visited, run dfs
                if (grid[i][j] == '1') {
                    num_islands++;
                    dfs(grid, i, j);
                }
            }          
        }
        return num_islands;
    }
};