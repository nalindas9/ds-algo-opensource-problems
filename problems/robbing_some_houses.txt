Question: There is a row of houses. A robber wants to loot maximum money from the houses. However, there is a catch. 
          The houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
          
Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 400

Solution:

int maxMoney(const std::vector<int>& house_array) {
    // Initialize the DP base cases
	int max_n = 0;
    int max_n_1 = 0;
    int max_n_2 = 0;
    // Handle edge cases
    if (house_array.size() == 0)
        return 0;
    if (house_array.size() == 1)
        return house_array.at(0);
    if (house_array.size() == 2)
        return std::max(house_array.at(0), house_array.at(1));
    // F(n-2) = first element of array
    max_n_2 = house_array.at(0);
    // F(n-1) = max(first element, second element)
    max_n_1 = std::max(house_array.at(0), house_array.at(1)); 	
    int amount = 0;
    // Iterate through array from index 2 
    for (int i=2; i<house_array.size(); i++) {
        amount = house_array.at(i);
        // f(n) = max(current amount + f(n-2), f(n-1))
        max_n = std::max(max_n_2 + amount, max_n_1);
        max_n_2 = max_n_1;
        max_n_1 = max_n;
    }
    return max_n; 
}

int main() {
	std::vector<int> input1 = {2,7,9,3,1};
	int max_amount = maxMoney(input1);
	std::cout << "Max amount robbed is: " << max_amount << std::endl;
	return 0;
}
