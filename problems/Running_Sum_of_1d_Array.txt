## Problem-
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.
 
Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6

--------------------------------------------------------------------------------------
## Solution-

import java.util.ArrayList;

class Solution {
    public int[] runningSum(int[] nums) {
        /*
        Input: nums = [1,2,3,4]
        Output: [1,3,6,10]
        
        Iterate through the array
        and keep adding current element
        to prefixsum[n-1]
        */
        // Initialize prefixsum
        int prefix_sum = 0;
        // Create output array for storing
        // running sums
        int[] running_sums = new int[nums.length];
        for (int i=0; i<nums.length; i++) {
            prefix_sum = prefix_sum + nums[i];
            running_sums[i] = prefix_sum;
        }
        return running_sums;
    }
}
