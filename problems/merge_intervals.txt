Question:
Given an array of intervals where intervals[i] = [starti, endi], merge
all overlapping intervals, and return an array of the non-overlapping 
intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104


Solution:

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        """
        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
        Output: [[1,6],[8,10],[15,18]]
        
        Input: intervals = [[1,4],[4,5]]
        Output: [[1,5]]
        
        Approach 1:
        1.  [[1,6],[8,10],[15,18]]
                    ^
            [[1, 5]]
            
            [[1, 6],[8,18]]
            
            [[0, 4], [1, 4], ]
            
            [1,2] [4, 6]
            
            --------------------------
            0                 4
            
            Definition of overlap 
            
        Time- O(n)
        Space- O(1)
        
        [[1, 10], [2, 3], [4, 5], [6, 7], [8, 9]]
        """
        i = 0
        intervals.sort()
        while i < len(intervals) - 1:
            # Check if overlapping
            overlapping = False
            c1 = intervals[i][0] >= intervals[i+1][0] and intervals[i][0] <= intervals[i+1][1]
            c2 = intervals[i][1] >= intervals[i+1][0] and intervals[i][1] <= intervals[i+1][1]
            c3 = intervals[i+1][0] >= intervals[i][0] and intervals[i+1][0] <= intervals[i][1]
            c4 = intervals[i+1][1] >= intervals[i][0] and intervals[i+1][1] <= intervals[i][1]
            
            if c1 or c2 or c3 or c4:
                overlapping = True
            
            if overlapping:
                upper = max(intervals[i] + intervals[i+1])
                lower = min(intervals[i] + intervals[i+1])
                intervals[i] = [lower, upper]
                intervals.pop(i+1)
            else:
                i += 1
        return intervals
                    