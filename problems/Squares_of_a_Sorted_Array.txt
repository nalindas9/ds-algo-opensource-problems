Problem:
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?

Solution:
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        /*
        Example 1:

        Input: nums = [-4,-1,0,3,10]
        Output: [0,1,9,16,100]
        Explanation: After squaring, the array becomes [16,1,0,9,100].
        After sorting, it becomes [0,1,9,16,100].
        Example 2:

        Input: nums = [-7,-3,2,3,11]
        Output: [4,9,9,49,121]
        
        [-4,-1,0,3,10]
          ^
        After squaring, the array becomes [16,1,0,9,100]
        [16,1,0,9,100]
         l          r
        [16,1,0,9,100]
         l      r
        [9,1,0,16,100]
         l   r
        [0,1,9,16,100]
         l r
         
         Hence time would be O(n) for squaring
         and O(n) for sorting
         so O(n+n) = O(n)
         space = O(1)
         
         Approach 2:
         [-4,-1,0,3,10]
              l r
           
         result = [0,1,9,16,100]
         
         if abs(right) > abs(left):
            add left to first position in result
         then decrement right pointer
         if abs(left) > abs(right):
            add left to first position in result
         then increment left pointer
         Keep doing this till left = right pointer
        */
        // Initialize left and right pointers
        int right = nums.size()-1;
        int left = 0;
        //Initialize result vector
        std::vector<int> result = {};
        // Iterate through array from end
        // decrementing right pointer
        while (left <= right) {
            // If abs value of right> left
            // Add to first index in result
            if (std::abs(nums[right]) >= std::abs(nums[left])) {
                result.insert(result.begin(),nums[right]*nums[right]);
                right--;
            }
            else if (std::abs(nums[right]) < std::abs(nums[left])) {
                result.insert(result.begin(), nums[left]*nums[left]);
                left++;
            }
        }
        return result;
    }
};
