// Problem
Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:


Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 100

//Solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };   
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        /*
        Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
        Output: 15
        
        Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
        Output: 19
        
        Approach 1:
        1. Run BFS. Add all deepest leaf nodes while traversing.
        
        Time - O(n)
        Space - O(len(row))
        */
        // Initialize queue for BFS
        std::vector<TreeNode*> que = {};
        /// Add root to the queue
        que.push_back(root);
        // Deepest sum var
        int deepest_sum = 0;
        // Run BFS
        while (que.size() != 0) {
            // Get current level size
            int level_size = que.size();
            // Reset deepest sum for current level
            deepest_sum = 0;
            
            // Process nodes at the current level
            for (int i=0; i<level_size; i++) {
                // Pop root node 
                TreeNode* root = que[0];
                que.erase(que.begin());
                // Add child nodes
                if (root->left != NULL)
                    que.push_back(root->left);
                if (root->right != NULL)
                    que.push_back(root->right);
                if (root->left == NULL && root->right == NULL)
                    // Then this is leaf node
                    deepest_sum += root->val;
            }
        }
        return deepest_sum;
    }
};
