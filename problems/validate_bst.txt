Question:


Solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        """
        Approach 1:
        1. Recursive DFS
        
                        6
                     4     8
                   2   5 7   9
                   
                   1
                 null 1
        Time - O(n)
        Space - O(n)
        """
        def validate(node, low=-math.inf, high=math.inf):
            # Check if current node is null
            if not node:
                return True
            
            # Current node must be between low and high
            if node.val <= low or if node >= high:
                return False
            
            # Ensure left and right subtree valid
            return validate(node.left, low, node.val) and validate(node.right, node.val, high)
        
        return validate(root)
        