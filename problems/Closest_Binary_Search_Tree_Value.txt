## Problem
Given the root of a binary search tree and a target value, return the value in the BST that is closest to the target. If there are multiple answers, print the smallest.

 

Example 1:


Input: root = [4,2,5,1,3], target = 3.714286
Output: 4
Example 2:

Input: root = [1], target = 4.428571
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
0 <= Node.val <= 109
-109 <= target <= 109

## Solution

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} target
 * @return {number}
 */

var closestValue = function(root, target) {
    function helper(root, target) {
        if (root == null) {
            return closest_val;
        }

        var diff = Math.abs(root.val - target);

        if (diff <= least_diff) {
            least_diff = diff;
            closest_val = root.val;
        }
        if (root.val <= target) {
            helper(root.right, target);
        } else {
            helper(root.left, target);
        }
    }
    var least_diff = Infinity;
    var closest_val = null;
    helper(root, target)
    return closest_val;
};
