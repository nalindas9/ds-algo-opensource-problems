## Problem
There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

 

Example 1:


Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2
Example 2:


Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.
 

Constraints:

1 <= n <= 2 * 105
0 <= edges.length <= 2 * 105
edges[i].length == 2
0 <= ui, vi <= n - 1
ui != vi
0 <= source, destination <= n - 1
There are no duplicate edges.
There are no self edges.

## Solution

class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        /*
        Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
        Output: true
        
        Approach:
        1. Create an IMPORTANT FOR GRAPHS- adjacency list from the edges.
        2. Run a Depth-First Search (DFS) from the source node.
        3. If we reach the destination node during DFS, return true.
        4. If DFS is over and we haven't reached the destination node, return false.
        
        Time Complexity - O(V+E)
        Space Complexity - O(V)
        */
        vector<vector<int>> adj(n);
        // Create Adjacency Matrix for Graph
        for(const auto &edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        // Keep track of visted nodes
        vector<bool> visited(n, false);
        return dfs(source, destination, adj, visited);
    }

private:
    bool dfs(int node, int destination, const vector<vector<int>>& adj, vector<bool>& visited) {
        if(node == destination) {
            return true;
        }
        
        visited[node] = true;
        // Iterate through the node neighbours
        // If destination found, then return true
        for(const auto &neighbour : adj[node]) {
            if(!visited[neighbour] && dfs(neighbour, destination, adj, visited)) {
                return true;
            }
        }
        
        return false;
    }
};
