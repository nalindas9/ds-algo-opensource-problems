class Solution:
    def trap(self, height: List[int]) -> int:
        """
        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
        Output: 6
        
        Input: height = [4,2,0,3,2,5]
        Output: 9
        
        Approach 1:
        1.  [0,1,0,2,1,0,1,3,2,1,2,1]
        Peaks = [1, 3, 8, 11]
        min between peaks = [1, 2, 2]
        list = [(1, 2)]
        area = [1 - all blocks in between the area, ]
        
        Peaks are basically max of left center and right element 
        [1, 2, 1, 3, 2]
        Peaks cannot be adjacent to each other
        
        Approach 2:
        1. We know that in order for water to be trapped.
        For each index in height. There has to be a higher point before it
        at some point and a higher point after it in order for it to trap 
        water.
        2. So in order to do this, do array preprocessing. Create
        left and right higher point arrays
        3. finally iterate through array with min(left_i, right_i) - height_i
        """
        # Approach 2
        left, right = list(), list()
        
        max_left, max_right = 0, 0
        for i in range(len(height)):
            if height[i] >= max_left:
                max_left = height[i]
                left.append(max_left)
            else:
                left.append(max_left)

            if height[len(height) - 1 - i] >= max_right:
                max_right = height[len(height) - 1 - i]
                right.insert(0, max_right)
            else:
                right.insert(0, max_right)
        
        print('left: {}, right: {}'.format(left, right))
        
        trapped_water = list()
        
        for i in range(len(height)):
            trapped_water.append(min(left[i], right[i]) - height[i])
            
        return sum(trapped_water)
        
        """
        # Approach 1
        # Get the peaks
        peaks = dict()
        offset = 0
        for i in range(len(height)):
            if i == 0:
                window = height[i:i+2]
                offset = i
            elif i == len(height) - 1:
                window = height[i-1:i+1]
                offset = i-1
            else:
                window = height[i-1:i+2]
                offset = i-1
            print('Window: {}'.format(window))
            max_height_idx = window.index(max(window)) + offset
            print('max_height_idx: {}, max: {}, offset: {}'.format(max_height_idx, max(window), offset))
            if max_height_idx not in peaks.keys():
                peaks[max_height_idx] = height[max_height_idx]
        print(peaks)
        # Peaks cannot be adjacent to each other
        print('Peaks indices: {}'.format(peaks.keys()))
        # If global peak and second lower peak are outbounds,
        # then ignore the middle peaks
        # 1 2 1 3 2 2
        # 4 3 5
        peaks_indices = list(peaks.keys())
        i = 0
        while i < (len(peaks_indices) - 1):
            if peaks_indices[i+1] - peaks_indices[i] == 1:
                if peaks[peaks_indices[i+1]] >= peaks[peaks_indices[i]]:
                    peaks_indices.remove(peaks_indices[i])
                    i -= 1
                else:
                    peaks_indices.remove(peaks_indices[i+1])
                    i -= 1
            i += 1
        print('Filtered peaks indx: {}'.format(peaks_indices))
        # Calculate min between peaks
        min_bw_peaks = list()
        for i in range(len(peaks_indices)-1):
            min_bw_peaks.append(min(peaks[peaks_indices[i]], 
                                    peaks[peaks_indices[i+1]]))
        print('min_bw_peaks: {}'.format(min_bw_peaks))
        # Calculate areas between peaks
        areas = list()
        for i in range(len(peaks_indices)-1):
            areas.append(min_bw_peaks[i]*(peaks_indices[i+1]-peaks_indices[i]-1))
        print('areas: {}'.format(areas))
        # Subtract elevation from areas
        for i in range(len(areas)):
            areas[i] -= sum(height[peaks_indices[i]+1:peaks_indices[i+1]])
        print('Final area: {}'.format(areas))
        return sum(areas)
        """