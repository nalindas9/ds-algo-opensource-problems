## Problem
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

## Solution

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var deleteDuplicates = function(head) {
    /*
    Input: head = [1,1,2,3,3]
    Output: [1,2,3]
    
    Approach 1:
    [1,1,2,3,3]
     ^
     We know linked list is sorted.
     So we can just compare adjacent elements
     and delete repeating ones
     
     [1,2,3]
            ^
    Time - O(n)
    Space - O(1)
    */
    let new_head = head
    // Iterate through linked list
    while (head != null) {
        if (head.next != null && head.val == head.next.val) {
            // Delete head.next
            head.next = head.next.next
        } else {
            head = head.next
        }
    }
    return new_head
    
};
