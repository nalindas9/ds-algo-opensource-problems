## Problem
Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

## Solution

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        /*
        Input: root = [3,9,20,null,null,15,7]
        Output: [[3],[20,9],[15,7]]
        
        Approach 1:
        1. We can perform BFS. But each time we add
        children to queue, we can alternate between
        first adding left or right child first.
        
        [9, 15, 7]
        
        Time - O(n)
        Space - O(max(level))
        */
        List<List<Integer>> output = new ArrayList<>();
        if (root == null) {
            return output;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean zigzag = false;
        // Run BFS
        while (!queue.isEmpty()) {
            // Create a list for integers
            List<Integer> sub_output = new ArrayList<>();
            int size = queue.size();
            for (int i=0; i<size; i++) {
                root = queue.poll();
                if (zigzag) {
                    sub_output.add(0, root.val);
                } else {
                    sub_output.add(root.val);
                }
                if (root.left != null) {
                    queue.add(root.left);
                }
                if (root.right != null) {
                    queue.add(root.right);
                }
            }
            output.add(sub_output);
            zigzag = !zigzag;
        }
        return output;
    }
}
