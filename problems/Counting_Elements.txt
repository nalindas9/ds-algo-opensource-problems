## Problem
Given an integer array arr, count how many elements x there are, such that x + 1 is also in arr.
If there are duplicates in arr, count them separately.

Example 1:

Input: arr = [1,2,3]
Output: 2
Explanation: 1 and 2 are counted cause 2 and 3 are in arr.
Example 2:

Input: arr = [1,1,3,3,5,5,7,7]
Output: 0
Explanation: No numbers are counted, cause there is no 2, 4, 6, or 8 in arr.
 

Constraints:

1 <= arr.length <= 1000
0 <= arr[i] <= 1000

## Solutions
import java.util.Arrays;
import java.util.HashMap;

class Solution {
    public int countElements(int[] arr) {
        /*
        Input: arr = [1,2,3]
        Output: 2
        
        Target: 
        Time - O(n)
        Space -(1)
        
        Approach 1:
        1. [1,2,3]
        First iterate through array 
        and create hashmap of elements. While 
        iterating check if x-1 exists from 
        2nd element onwards
        {
            1:1,
            2:2,
            3:3
        }

        Time -O(n)
        Space - O(n)
        
        [1,3,2,3,5,0]
        {
            1:0,
            2:0,
            3:1,
            5:1,
            0:1
        }
        
        [1,3,2,3,5,0]
                   ^
        x_num = 3
        
        Approach 2:
        1. [1,2,3]
        Assuming arrray is sorted in
        ascending order
        [1,2,3]
        Iterate through array
        Check if current element+1 = next_element
        if yes, increment x_num
        else move on
        
        Input: arr = [1,1,3,3,5,5,7,7]
                                      
        Output: 0
        Time - O(n)
        Space - O(1)
        
        Approach 3:
        
        1. [1,3,2,3,5,0]
        Turns out array is not sorted.
        Hence sort it first
        [1,1,2,2]
         ^
         Looks like this
         method doesn't
         consider +1 elements
         there are not adjacent.
         hence better to use approach
         1
         
        Time - O(nlogn)
        Space - O(1)
        */
        int x_num = 0;      
        // Create hashmap
        HashMap<Integer,Integer> map = new HashMap<>();
        // Handle Edge Cases
        if (arr.length <= 1)
            return 0;
        // Iterate through array to
        // convert to hashmap
        for (int i=0; i<arr.length; i++) {
            // First put element in hashmap
            // if not exist, else increment count
            if (map.containsKey(arr[i]))
                map.put(arr[i], map.get(arr[i]) + 1);
            else
                map.put(arr[i], 1);
        }
        // Print map
        System.out.println(Arrays.asList(map));
        //Iterate through array
        for (int i=0; i<arr.length; i++) {
            // If current element+1 value == 0
            // then pass
            if (map.get(arr[i]) == 0)
                continue;
            // Check if current element+1
            // exists in hashmap
            // if yes, then decrement hashmap
            // count and increment x_num
            if (map.containsKey(arr[i]+1)) {
                map.put(arr[i], map.get(arr[i]) - 1);;
                x_num++;
                System.out.printf("arr[i]=%d, x_num:=%d\n", arr[i], x_num);
            }
        }
        return x_num;
    }
}
