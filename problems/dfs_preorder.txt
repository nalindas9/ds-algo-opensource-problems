Problem:
Given the root of a binary tree, return the preorder traversal of its nodes' values.

Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Solution:
"""
              1
             2 3
            4 5 6
        1: [2, 3]
        2: [4, 5]
        3: [6]
        4: []
        5: [6]
        6: []
        
        [37, -45, ]
        
        Time - Each node exactly once visited hence O(N)
        Space - O(N)
        """
        stack, output = list(), list()
        
        if root == None:
            return []
        
        stack.append(root)
        
        while stack:
            node = stack.pop()
            output.append(node.val)
            
            if node.right is not None:
                stack.append(node.right)
            if node.left is not None:
                stack.append(node.left)
            
        return output