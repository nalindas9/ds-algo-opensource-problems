Question:
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Solution:
/*
S R R R R R R 
R	R	R	R	R	R	R	
R R R R R R F							

(x, y)

unique_paths = uniquePaths(x, y-1) + uniquePaths(x-1, y)

Approach 1:
1. Dynamic Programming solution - 

S 1 1 1  1  1  1  
1	2	3	4	 5	6	 7	
1 3 6 10 15 21 28

Return 28

Approach 1:
1. Initialize board 1st row and 1st column with ones 
2. Iterate through the cells exluding first row and column.
3. At each cell the value = grid[x][y-1] + grid[x-1][y]
4. Return the last cell value

Time - O(n-1*m-1) = O(n*m)
Space - O(1)

Edge cases:
1. m, n = 1, 1
2. m, n = 100, 100
3. unique_paths = 2*10^9
*/
#include <iostream>
#include <vector>

int uniquePaths(std::vector<std::vector<int>>& grid) {
	//Edge cases
	if (grid.size() == 1 && (grid.at(0)).size() == 1)
		return 1;
	
	// Initialize the 1st row with ones
	for (int i=0; i<(grid.at(0)).size(); i++) {
		((grid.at(0)).at(i)) = 1;	
	}
	// Initialize the 1st column with ones
	for (int i=0; i<grid.size(); i++) {
		(grid.at(i)).at(0) = 1;	
	}
	
	// Iterate cells in grid excluding 1st row and column
	for (int i=1; i<grid.size(); i++) {
		for (int j=1; j<(grid.at(i)).size(); j++) {
			(grid.at(i)).at(j) = (grid.at(i-1)).at(j) + (grid.at(i)).at(j-1);
		}
	}
	// Return last cell value
	return (grid.at(grid.size()-1)).at((grid.at(0)).size()-1);
}

int main() {
	std::vector<std::vector<int>> input1 = {{0, 0, 0, 0, 0, 0, 0}, 
                                            {0, 0, 0, 0, 0, 0, 0}, 
                                            {0, 0, 0, 0, 0, 0, 0}};
	int unique_paths = uniquePaths(input1);
	std::cout << "Unique paths: " << unique_paths << std::endl;
	return 0;
}
