Question:
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?


Solution:

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        """
        Example 1:
        Input: nums = [-4,-1,0,3,10]
        Output: [0,1,9,16,100]
        
        Explanation: After squaring, the array becomes [16,1,0,9,100].
        After sorting, it becomes [0,1,9,16,100].
        
        Example 2:
        Input: nums = [-7,-3,2,3,11]
        Output: [4,9,9,49,121]
        
        Constraints:

        1 <= nums.length <= 104
        -104 <= nums[i] <= 104
        nums is sorted in non-decreasing order.
        
        Approach 1:
        1. Iterate through each element in array and square it.
        2. Sort the array in ascending order
        
        Time - O(n*logn)
        Space - O(n)
        
        Approach 2:
        1. [-4,-1,0,3,10]
        Two Point method
        [-4, -1, 0, 3, 10]
                 R
                 L
        If we look at absolute values, either left or right is going to be largest
        value
        output = [0,1,9,16,100]
        
        Time - O(n)
        Space - O(n)
              
        """
        # ---- Approach 1  ----
        # for i in range(len(nums)):
        #     nums[i] *= nums[i]
        # nums.sort()
        # return nums
        
        # --- Approach 2 ----
        # Set left & Right pointers
        left, right = 0, (len(nums) - 1)
        # Output list
        output = list()
        while 1:
            print('left:{}, right:{}'.format(left, right))
            if left == right:
                output.insert(0, nums[right]*nums[right])
                break
            if abs(nums[left]) >= abs(nums[right]):
                output.insert(0, nums[left]*nums[left])
                left += 1
            elif abs(nums[left]) <= abs(nums[right]):
                output.insert(0, nums[right]*nums[right])
                right -= 1
            else:
                continue
        return output