Question:
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q 
as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the tree.

Solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def dfs(self, root: 'TreeNode') -> dict:
        stack = list()
        hashmap = dict()
        stack.append(root)
        
        level = 0
        parent = None
        hashmap[root] = (parent, level)
        
        while stack:
            node = stack.pop()
            parent = node
            
            if node.right is not None and (node.right not in hashmap.keys()):
                stack.append(node.right)
                hashmap[node.right] = (parent, hashmap[node][1] + 1)
                
            if node.left is not None and (node.left not in hashmap.keys()):
                stack.append(node.left)
                hashmap[node.left] = (parent, hashmap[node][1] + 1)
        
        return hashmap
    
    def backTrack(self, hashmap: dict, node: 'TreeNode') -> list():
        ancestors = list()
        ancestors.append(node)
        # Iterate the hashmap
        while 1:
            parent = hashmap[node][0]
            ancestors.append(parent)
            node = parent
            if node is None:
                return ancestors
        return []
    
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        """
        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
        Output: 3
        
        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
        Output: 5
        
        Input: root = [1,2], p = 1, q = 2
        Output: 1
        
        Approach 1:
        1. Do a dfs.
        2. For each node, store its parent in a hashmap.
        3. To find LCA, 
        {3 : [null, 0],
         5 : [3, 1],
         6 : [5, 2],
         2 : [5, 2],
         7 : [2, 3],
         4 : [2, 3],
         1 : [3, 1],
         0 : [1, 2],
         8 : [1, 2]}
         
         p = 5, q = 8
         
         We need level info as for each level, 
         we check if LCA exists. 
         
         p_level = 1, q_level = 2
         
         Iterate hashmap, from level thats lower or equal. 
         As we move up level - 1 and check if lca exists.
         Iterate till we find it. 
        """
        hashmap = self.dfs(root=root)
        # Iterate hashmap
        ancestors_p = self.backTrack(hashmap, p)
        ancestors_q = self.backTrack(hashmap, q)
        
        # Find first parent of q in p's ancestors
        for ancestor in ancestors_p:
            if ancestors_q.count(ancestor) > 0:
                return ancestor
                
        return None