Solution 1:

/*
The array A is [1 3 -1 -3 5 3 6 7], and B is 3.
    [1 3 -1 -3 5 3 6 7]
                 ^   ^ 
     Max - 7
     
     return - 
     [3, 3, 5, 5, 6, 7]
     
     Approach 1:
     1. Iterate through the array. Maintain two pointers which
     makes up the sliding window
     2. Iterate through window and find max by updating value of
     max variable
     3. Once max is obtained, append it to the output array
     
     Time - O(n*m)
     Space - O(n)
     
     Approach 2:
     1. [1 3 -1 -3 5 3 6 7]  B = 3
         ^    ^
         [1 3 1
         
         
    Edge cases:
    1. Array empty
*/

vector<int> Solution::slidingMaximum(const vector<int> &A, int B) {
    // Create array to store max values
    std::vector<int> max_values = {};
    // If array empty return empty max values
    if (A.size() == 0)
        return max_values;
    // If array size < window size 
    if (A.size() <= B) {
        max_values.push_back(
            *std::max_element(A.begin(), A.end())
        );
        return max_values; 
    }
    // Loop through the array
    for (int i=0; i<A.size()-B+1; i++) {
        // Create variable to store max value
        int max = A[i];
        for (int j=i; j<B; j++) {
            // Check if current element > max
            // if yes, update max value
            if (A[j] > max)
                max = A[j];
        }
        max_values.push_back(max);
    }
    return max_values;
}
