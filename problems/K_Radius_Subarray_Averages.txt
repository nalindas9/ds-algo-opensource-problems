## Problem
You are given a 0-indexed array nums of n integers, and an integer k.

The k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). If there are less than k elements before or after the index i, then the k-radius average is -1.

Build and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.

The average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its fractional part.

For example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.

## Solution
import "math"
import "fmt"

// Function to calculate sum in GoLang
func getArraySum(nums []int) int{
    sum:=0
    for i:=0; i<len(nums); i++ {
        sum += nums[i]
    }
    return sum
}

func getAverages(nums []int, k int) []int {
    /*
    Input: nums = [7,4,3,9,1,8,5,2,6], k = 3
    Output: [-1,-1,-1,5,4,4,-1,-1,-1]
    Run for loop from
    k to n-k to fill up all avergages
    [7,4,3,5,4,4,5,2,6]
    Then run for loop from 
    0 to k-1 filling in -1's
    [-1,-1,-1,5,4,4,-1,-1,-1]
    */
    array_len := len(nums)
    // Create copy array of same length
    // as original
    nums_copy := make([]int, array_len)
    // Create a deep copy of array
    // to enter the new values
    copy(nums_copy[:], nums[:])
    
    // Handle edge cases
    // If k > array length
    // then fill array with -1s
    fmt.Println("Nums len", len(nums))
    fmt.Println("k", k)
    if k >= len(nums) {
        // if nums len == 1
        if len(nums) == 1 {
            nums_copy[0] = -1
            return nums_copy
        }
        if len(nums) != 1 {
            for i:=0; i<len(nums); i++ {
                nums_copy[i] = -1
            }
            return nums_copy
        }
    }
    // Run for loop from
    // k to n-k to fill up all avergages
    for i:=k; i<len(nums)-k; i++ {
        average := getArraySum(nums[i-k:i+k+1])/(2*k + 1)
        // Calculate average of array centered at i
        nums_copy[i] = int(math.Floor(float64(average)))
    }
    // Then run for loop from 
    // 0 to k-1 filling in -1's
    for i:=0; i<k; i++ {
        // Fill in -1
        nums_copy[i] = -1
        nums_copy[len(nums)-1-i] = -1
    }
    return nums_copy
}
