## Problem
Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

The path starts with a single slash '/'.
Any two directories are separated by a single slash '/'.
The path does not end with a trailing '/'.
The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
Return the simplified canonical path.

 

Example 1:

Input: path = "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
Example 2:

Input: path = "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
Example 3:

Input: path = "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.
 

Constraints:

1 <= path.length <= 3000
path consists of English letters, digits, period '.', slash '/' or '_'.
path is a valid absolute Unix path.

## Solution
import java.util.Stack;

class Solution {
    public String simplifyPath(String path) {
        /*
            Input: path = "/home//foo/"
            Output: "/home/foo"
            
            Approach 1:
            1. Seperate the path into mulitple
            directories based on /
            2. Iterate through the substrings
            to add it to a stack. if we see a . or double ..
            then we pop accordingly
            3. Once we get final path, we can join it again
            using / to get canonical path
            
            Time - O(n)
            Space - O(1)
        */
        String[] path_substrs;
        // Split string based on '/'
        path_substrs = path.split("/|//");
        // Create stack
        Stack<String> stack = new Stack<>();
        // Iterate through the substrs
        for (int i=0; i<path_substrs.length; i++) {
            // if char is not .. or . then add it to stack
            if ((!path_substrs[i].equals(".")) && (!path_substrs[i].equals("..")) && (!path_substrs[i].equals(""))) {
                stack.push(path_substrs[i]);
            } else if (path_substrs[i].equals("..") && stack.size() != 0) {
                stack.pop();
            }
            else
                continue;
        }
        // Print the stack
        for (String element:stack) {
            System.out.println(element);
        }
        // Join the substrings using '/'
        path = String.join("/", stack);
        // If first char not '/' add it
        if (path.isEmpty() || path.charAt(0) != '/')
            path = "/" + path;
        return path;
    }
}
