Question:
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

Solution:

class Solution:
    def bfs(self, grid, node):
        x, y = node[0], node[1]
        queue = list()
        
        queue.append((x, y))
        grid[x][y] = 0
        
        area = 1
        north, south, east, west = None, None, None, None
        
        while queue:
            x, y = queue.pop(0)
            childs = list()
            if y > 0:
                north = (x, y - 1)
            if y < (len(grid[0]) - 1):
                south = (x, y + 1)
            if x > 0:
                west = (x-1, y)
            if x < (len(grid) - 1):
                east = (x+1, y)
            childs = [north, south, east, west]
            for child in childs:
                if (child != None) and grid[child[0]][child[1]] == 1:
                    queue.append(child)
                    grid[child[0]][child[1]] = 0
                    area += 1
                    
        return area, grid

    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        """
        grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],
                [0,0,0,0,0,0,0,1,1,1,0,0,0],
                [0,1,1,0,1,0,0,0,0,0,0,0,0],
                [0,1,0,0,1,1,0,0,1,0,1,0,0],
                [0,1,0,0,1,1,0,0,1,1,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,0,0],
                [0,0,0,0,0,0,0,1,1,1,0,0,0],
                [0,0,0,0,0,0,0,1,1,0,0,0,0]]
        
        Output - 6
        
        Approach 1:
        1. Iterate grid elementwise. 
        2. If we get 1, then perform BFS and store area in max_area variable
        3. Don't iterate elements that are already visited from bfs
        
        Time - O(V*E) -> O(m*n*e)
        Space - O(1)
        """
        max_area = 0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1:
                    area, grid = self.bfs(grid, (i, j))
                    if area > max_area:
                        max_area = area
        return max_area