## Problem

You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.

Return a list answer of size 2 where:

answer[0] is a list of all players that have not lost any matches.
answer[1] is a list of all players that have lost exactly one match.
The values in the two lists should be returned in increasing order.

Note:

You should only consider the players that have played at least one match.
The testcases will be generated such that no two matches will have the same outcome.
 

Example 1:

Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
Output: [[1,2,10],[4,5,7,8]]
Explanation:
Players 1, 2, and 10 have not lost any matches.
Players 4, 5, 7, and 8 each have lost one match.
Players 3, 6, and 9 each have lost two matches.
Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].
Example 2:

Input: matches = [[2,3],[1,3],[5,4],[6,4]]
Output: [[1,2,5,6],[]]
Explanation:
Players 1, 2, 5, and 6 have not lost any matches.
Players 3 and 4 each have lost two matches.
Thus, answer[0] = [1,2,5,6] and answer[1] = [].
 

Constraints:

1 <= matches.length <= 105
matches[i].length == 2
1 <= winneri, loseri <= 105
winneri != loseri
All matches[i] are unique.

## Solution
class Solution:
    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:
        """
        Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
        Output: [[1,2,10],[4,5,7,8]]
          
        Target/Constraints:
        - The values in the two lists should be returned in increasing order.
        - You should only consider the players that have played at least one match.
        - The testcases will be generated such that no two matches will have the same outcome.
        
        Approach 1:
        [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
                          ^
        We can use a hashmap. If player 1, add 0 losses. If player lost. Iincrement count
        
        {
            1:0
            3:2
            6:2
        }
        
        Iterate through hashmap and filter out 0 and 1 loss
        players in the 2 lists
        answer[0] = []
        answer[1] = []
        
        Time - O(nlogn)
        Space - O(n)
        """
        # Create dict to store losses
        num_losses = dict()
        # Convert list to dict of losses
        for i in range(len(matches)):
            for j in range(len(matches[i])):
                if j == 0:
                    if matches[i][j] not in num_losses.keys():
                        num_losses[matches[i][j]] = 0;
                    else:
                        continue
                else:
                    if matches[i][j] not in num_losses.keys():
                        num_losses[matches[i][j]] = 1;
                    else:
                        num_losses[matches[i][j]] += 1;
        # Iterate through hashmap and filter out 0 and 1 loss
        # players in the 2 lists
        # Create the answer list
        answer = [[], []]
        # Sort the keys in ascending order first
        #to fulfill constraints
        keys = list(num_losses.keys())
        keys.sort()
        # Go through keys to check values
        # and filter
        for key in keys:
            if num_losses[key] == 0:
                answer[0].append(key)
            elif num_losses[key] == 1:
                answer[1].append(key)
            else:
                pass
        return answer
