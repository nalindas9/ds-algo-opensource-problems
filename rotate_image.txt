Question:
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. 
DO NOT allocate another 2D matrix and do the rotation.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

Solution:

class Solution:
    def transpose(self, matrix):
        for i in range(len(matrix)):
            for j in range(len(matrix)):
                if i > j:
                    continue
                temp = matrix[i][j]
                matrix[i][j] = matrix[j][i]
                matrix[j][i] = temp
        return matrix
    
    def flip(self, matrix):
        for i in range(len(matrix)):
            row = matrix[i]
            row.reverse()
            matrix[i] = row
        return matrix
    
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        
        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
        Output: [[7,4,1],[8,5,2],[9,6,3]]
        
        Rotate 90 degree clockwise
        
        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
        
        
        Constraints:

        n == matrix.length == matrix[i].length -> Square matrix
        1 <= n <= 20 
        -1000 <= matrix[i][j] <= 1000
        
        Questions:
        1. Can the matrix be empty? If yes, do we need to return empty matrix?
        
        Approach 1:
           [[1,2,3],
            [4,5,6],
            [7,8,9]]
            
        1. Tranpose the array
           [[1,4,7],
            [2,5,8],
            [3,6,9]]
            
        2. Flip the array horizontally
           [[7,4,1],
            [8,5,2],
            [9,6,3]]
        
        Time - O(n^2)
        Space - O(1)
        
        """    
        matrix = self.transpose(matrix)
        matrix = self.flip(matrix)
        return matrix